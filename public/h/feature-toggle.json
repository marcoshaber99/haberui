{
  "name": "feature-toggle",
  "type": "registry:ui",
  "version": "1.0.0",
  "description": "Feature Toggle - A sleek, modern toggle button for enabling/disabling AI features with an elegant glowing effect when active.",
  "lastUpdated": "2025-02-26T16:21:40.633Z",
  "registryDependencies": [],
  "dependencies": [
    "lucide-react",
    "class-variance-authority"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "feature-toggle.tsx",
      "content": "/**\n * Feature Toggle - A sleek, modern toggle button for enabling/disabling AI features\n * with an elegant glowing effect when active.\n */\n\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst featureToggleVariants = cva(\n  \"inline-flex items-center gap-2 transition-all duration-200 font-medium rounded-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border\",\n        outline: \"border-2\",\n        solid: \"\",\n      },\n      size: {\n        sm: \"text-xs py-1 px-3\",\n        md: \"text-sm py-1.5 px-4\",\n        lg: \"text-base py-2 px-5\",\n      },\n      colorScheme: {\n        blue: [\n          // Light mode styles\n          \"data-[state=on]:text-blue-700 dark:data-[state=on]:text-cyan-300\",\n          \"data-[state=on]:border-blue-400/50 dark:data-[state=on]:border-cyan-500/30\",\n          \"data-[state=on]:bg-blue-50/70 dark:data-[state=on]:bg-cyan-950/30\",\n          \"data-[state=on]:shadow-[0_0_8px_1px_rgba(37,99,235,0.15),inset_0_0_5px_rgba(37,99,235,0.07)] dark:data-[state=on]:shadow-[0_0_10px_1px_rgba(6,182,212,0.2),inset_0_0_5px_rgba(6,182,212,0.1)]\",\n        ],\n        purple: [\n          \"data-[state=on]:text-purple-700 dark:data-[state=on]:text-purple-300\",\n          \"data-[state=on]:border-purple-400/50 dark:data-[state=on]:border-purple-500/30\",\n          \"data-[state=on]:bg-purple-50/70 dark:data-[state=on]:bg-purple-950/30\",\n          \"data-[state=on]:shadow-[0_0_8px_1px_rgba(126,34,206,0.15),inset_0_0_5px_rgba(126,34,206,0.07)] dark:data-[state=on]:shadow-[0_0_10px_1px_rgba(147,51,234,0.2),inset_0_0_5px_rgba(147,51,234,0.1)]\",\n        ],\n        green: [\n          \"data-[state=on]:text-green-700 dark:data-[state=on]:text-green-300\",\n          \"data-[state=on]:border-green-400/50 dark:data-[state=on]:border-green-500/30\",\n          \"data-[state=on]:bg-green-50/70 dark:data-[state=on]:bg-green-950/30\",\n          \"data-[state=on]:shadow-[0_0_8px_1px_rgba(5,150,105,0.15),inset_0_0_5px_rgba(5,150,105,0.07)] dark:data-[state=on]:shadow-[0_0_10px_1px_rgba(16,185,129,0.2),inset_0_0_5px_rgba(16,185,129,0.1)]\",\n        ],\n        amber: [\n          \"data-[state=on]:text-amber-700 dark:data-[state=on]:text-amber-300\",\n          \"data-[state=on]:border-amber-400/50 dark:data-[state=on]:border-amber-500/30\",\n          \"data-[state=on]:bg-amber-50/70 dark:data-[state=on]:bg-amber-950/30\",\n          \"data-[state=on]:shadow-[0_0_8px_1px_rgba(217,119,6,0.15),inset_0_0_5px_rgba(217,119,6,0.07)] dark:data-[state=on]:shadow-[0_0_10px_1px_rgba(245,158,11,0.2),inset_0_0_5px_rgba(245,158,11,0.1)]\",\n        ],\n        rose: [\n          \"data-[state=on]:text-rose-700 dark:data-[state=on]:text-rose-300\",\n          \"data-[state=on]:border-rose-400/50 dark:data-[state=on]:border-rose-500/30\",\n          \"data-[state=on]:bg-rose-50/70 dark:data-[state=on]:bg-rose-950/30\",\n          \"data-[state=on]:shadow-[0_0_8px_1px_rgba(225,29,72,0.15),inset_0_0_5px_rgba(225,29,72,0.07)] dark:data-[state=on]:shadow-[0_0_10px_1px_rgba(244,63,94,0.2),inset_0_0_5px_rgba(244,63,94,0.1)]\",\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n      colorScheme: \"blue\",\n    },\n  }\n);\n\nexport interface FeatureToggleProps\n  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"color\">,\n    VariantProps<typeof featureToggleVariants> {\n  /**\n   * Current state of the toggle\n   */\n  active?: boolean;\n\n  /**\n   * Called when the toggle state changes\n   */\n  onActiveChange?: (active: boolean) => void;\n\n  /**\n   * Icon to display before the label\n   */\n  icon?: React.ReactNode;\n\n  /**\n   * Classes applied to active state\n   */\n  activeClassName?: string;\n\n  /**\n   * Classes applied to inactive state\n   */\n  inactiveClassName?: string;\n\n  /**\n   * Classes applied to the icon\n   */\n  iconClassName?: string;\n}\n\nexport const FeatureToggle = React.forwardRef<\n  HTMLButtonElement,\n  FeatureToggleProps\n>(\n  (\n    {\n      className,\n      variant,\n      size,\n      colorScheme,\n      active = false,\n      onActiveChange,\n      children,\n      icon,\n      activeClassName,\n      inactiveClassName,\n      iconClassName,\n      ...props\n    },\n    ref\n  ) => {\n    // Handle clicking on the toggle\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n      // Call the original onClick if it exists\n      props.onClick?.(e);\n      // Call the onActiveChange callback\n      onActiveChange?.(!active);\n    };\n\n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        data-state={active ? \"on\" : \"off\"}\n        className={cn(\n          featureToggleVariants({ variant, size, colorScheme }),\n          active\n            ? \"text-foreground\"\n            : \"text-muted-foreground hover:text-foreground/80\",\n          active\n            ? \"border-muted/40 bg-background/40\"\n            : \"border-muted/20 bg-transparent\",\n          active ? activeClassName : inactiveClassName,\n          className\n        )}\n        aria-pressed={active}\n        onClick={handleClick}\n        data-slot=\"control\"\n        {...props}\n      >\n        {icon && (\n          <span\n            className={cn(\"flex items-center justify-center\", iconClassName)}\n            data-slot=\"icon\"\n          >\n            {icon}\n          </span>\n        )}\n        <span data-slot=\"text\">{children}</span>\n      </button>\n    );\n  }\n);\n\nFeatureToggle.displayName = \"FeatureToggle\";\n",
      "type": "registry:ui"
    }
  ]
}