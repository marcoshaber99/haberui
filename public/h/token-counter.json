{
  "name": "token-counter",
  "type": "registry:ui",
  "version": "1.0.0",
  "description": "Token Counter - A small, elegant UI component that counts tokens in text for AI applications, with visual indicators for approaching limits.",
  "lastUpdated": "2025-02-25T22:18:44.407Z",
  "registryDependencies": [
    "progress",
    "tooltip"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "token-counter.tsx",
      "content": "/**\n * Token Counter - A small, elegant UI component that counts tokens in text\n * for AI applications, with visual indicators for approaching limits.\n */\n\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { AlertCircle } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport interface TokenCounterProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The text to count tokens from\n   */\n  text: string;\n  /**\n   * Maximum token limit\n   */\n  maxTokens?: number;\n  /**\n   * The tokenizer to use (defaults to GPT-3.5 approximation)\n   */\n  tokenizer?: \"gpt3\" | \"gpt4\" | \"claude\" | \"llama\" | \"custom\";\n  /**\n   * Custom function to count tokens (used when tokenizer is 'custom')\n   */\n  customTokenCounter?: (text: string) => number;\n  /**\n   * Show warning when approaching token limit\n   */\n  showWarning?: boolean;\n  /**\n   * Percentage of max tokens that triggers the warning state\n   */\n  warningThreshold?: number;\n  /**\n   * Position of the counter\n   */\n  position?:\n    | \"top-right\"\n    | \"top-left\"\n    | \"bottom-right\"\n    | \"bottom-left\"\n    | \"inline\";\n  /**\n   * Show progress bar\n   */\n  showProgress?: boolean;\n  /**\n   * Label for token count\n   */\n  label?: string;\n  /**\n   * Custom class for progress bar\n   */\n  progressClassName?: string;\n}\n\n// Simple tokenizer functions for different models (approximations)\nconst tokenizers: Record<string, (text: string) => number> = {\n  gpt3: (text: string) => {\n    // GPT-3 approximation (roughly 4 chars per token)\n    return Math.ceil(text.length / 4);\n  },\n  gpt4: (text: string) => {\n    // GPT-4 approximation (roughly 3.5 chars per token)\n    return Math.ceil(text.length / 3.5);\n  },\n  claude: (text: string) => {\n    // Claude approximation (roughly 4 chars per token)\n    return Math.ceil(text.length / 4);\n  },\n  llama: (text: string) => {\n    // LLaMA approximation (roughly 4.5 chars per token)\n    return Math.ceil(text.length / 4.5);\n  },\n  // Adding empty custom tokenizer to satisfy TypeScript\n  custom: () => 0,\n};\n\nexport const TokenCounter = React.forwardRef<HTMLDivElement, TokenCounterProps>(\n  (\n    {\n      className,\n      text = \"\",\n      maxTokens = 4096,\n      tokenizer = \"gpt3\",\n      customTokenCounter,\n      showWarning = true,\n      warningThreshold = 0.85,\n      position = \"inline\",\n      showProgress = true,\n      label = \"tokens\",\n      progressClassName,\n      ...props\n    },\n    ref\n  ) => {\n    // Count tokens\n    const tokenCount = React.useMemo(() => {\n      if (tokenizer === \"custom\" && customTokenCounter) {\n        return customTokenCounter(text);\n      }\n      return tokenizers[tokenizer](text);\n    }, [text, tokenizer, customTokenCounter]);\n\n    // Calculate percentage of tokens used\n    const percentUsed = (tokenCount / maxTokens) * 100;\n\n    // Determine if we should show a warning\n    const isApproachingLimit = percentUsed >= warningThreshold * 100;\n    const isOverLimit = percentUsed >= 100;\n\n    // Position classes\n    const positionClasses = {\n      \"top-right\": \"absolute top-2 right-2\",\n      \"top-left\": \"absolute top-2 left-2\",\n      \"bottom-right\": \"absolute bottom-2 right-2\",\n      \"bottom-left\": \"absolute bottom-2 left-2\",\n      inline: \"\",\n    };\n\n    // Remove unused getColor function since we're using inline styles now\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"text-xs flex flex-col gap-1.5\",\n          positionClasses[position],\n          className\n        )}\n        {...props}\n      >\n        <div className=\"flex items-center gap-1.5\">\n          {(isApproachingLimit || isOverLimit) && showWarning && (\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <AlertCircle\n                    size={12}\n                    className={\n                      isOverLimit\n                        ? \"text-red-500 dark:text-red-400\"\n                        : \"text-amber-500 dark:text-amber-400\"\n                    }\n                  />\n                </TooltipTrigger>\n                <TooltipContent side=\"top\" className=\"text-xs max-w-60\">\n                  {isOverLimit\n                    ? `Exceeded maximum token limit of ${maxTokens.toLocaleString()}`\n                    : `Approaching token limit (${Math.round(percentUsed)}% used)`}\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          )}\n          <span\n            className={cn(\n              \"font-medium\",\n              isOverLimit\n                ? \"text-red-600 dark:text-red-400\"\n                : isApproachingLimit\n                  ? \"text-amber-600 dark:text-amber-400\"\n                  : \"text-muted-foreground\"\n            )}\n          >\n            {tokenCount.toLocaleString()}\n            {maxTokens ? ` / ${maxTokens.toLocaleString()}` : \"\"} {label}\n          </span>\n        </div>\n\n        {showProgress && maxTokens > 0 && (\n          <Progress\n            value={Math.min(percentUsed, 100)}\n            className={cn(\n              \"h-1\",\n              isOverLimit\n                ? \"bg-red-100 dark:bg-red-950 [&>div]:bg-red-500 dark:[&>div]:bg-red-400\"\n                : isApproachingLimit\n                  ? \"bg-amber-100 dark:bg-amber-950 [&>div]:bg-amber-500 dark:[&>div]:bg-amber-400\"\n                  : \"bg-muted [&>div]:bg-primary\",\n              progressClassName\n            )}\n          />\n        )}\n      </div>\n    );\n  }\n);\n\nTokenCounter.displayName = \"TokenCounter\";\n",
      "type": "registry:ui"
    }
  ]
}