{
  "name": "ai-parameter-controls",
  "type": "registry:ui",
  "version": "1.0.0",
  "description": "AI Parameter Controls - A clean, elegant UI for adjusting common AI model parameters with visual controls, helpful tooltips, and preset configurations.",
  "lastUpdated": "2025-02-25T22:50:23.709Z",
  "registryDependencies": [
    "slider",
    "input",
    "button",
    "tooltip",
    "select"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "ai-parameter-controls.tsx",
      "content": "/**\n * AI Parameter Controls - A clean, elegant UI for adjusting common AI model parameters\n * with visual controls, helpful tooltips, and preset configurations.\n */\n\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw, Zap } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport interface AIParameter {\n  name: string;\n  value: number;\n  min: number;\n  max: number;\n  step: number;\n  description: string;\n}\n\nexport interface Preset {\n  name: string;\n  description: string;\n  parameters: {\n    [key: string]: number;\n  };\n}\n\nexport interface AIParameterControlsProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Parameters to display (temperature, top_p, etc)\n   */\n  parameters: AIParameter[];\n  /**\n   * Called when parameters are changed\n   */\n  onParametersChange?: (parameters: AIParameter[]) => void;\n  /**\n   * Available presets\n   */\n  presets?: Preset[];\n  /**\n   * Called when a preset is selected\n   */\n  onPresetChange?: (preset: Preset) => void;\n  /**\n   * Show the reset button\n   */\n  showReset?: boolean;\n  /**\n   * Show the presets selector\n   */\n  showPresets?: boolean;\n  /**\n   * Label for the reset button\n   */\n  resetLabel?: string;\n  /**\n   * Custom class for the parameter container\n   */\n  parameterClassName?: string;\n  /**\n   * Layout direction\n   */\n  layout?: \"horizontal\" | \"vertical\";\n  /**\n   * Number of decimal places to display\n   */\n  decimalPlaces?: number;\n}\n\n// Default parameters with descriptions\nexport const DEFAULT_PARAMETERS: AIParameter[] = [\n  {\n    name: \"temperature\",\n    value: 0.7,\n    min: 0,\n    max: 2,\n    step: 0.1,\n    description:\n      \"Controls randomness: Lower values are more focused and deterministic, higher values are more creative and varied.\",\n  },\n  {\n    name: \"top_p\",\n    value: 0.9,\n    min: 0,\n    max: 1,\n    step: 0.05,\n    description:\n      \"Nucleus sampling: Limits token selection to those with top probability mass. Lower values make output more focused.\",\n  },\n  {\n    name: \"max_tokens\",\n    value: 256,\n    min: 1,\n    max: 4096,\n    step: 1,\n    description:\n      \"Maximum length of the generated output in tokens. One token is roughly 4 characters or 0.75 words.\",\n  },\n  {\n    name: \"frequency_penalty\",\n    value: 0,\n    min: -2,\n    max: 2,\n    step: 0.1,\n    description:\n      \"Reduces repetition by penalizing tokens based on their frequency. Higher values decrease repetition.\",\n  },\n];\n\n// Default presets\nexport const DEFAULT_PRESETS: Preset[] = [\n  {\n    name: \"Balanced\",\n    description: \"Default balanced settings for general use\",\n    parameters: {\n      temperature: 0.7,\n      top_p: 0.9,\n      max_tokens: 256,\n      frequency_penalty: 0,\n    },\n  },\n  {\n    name: \"Creative\",\n    description: \"Settings for more varied and creative outputs\",\n    parameters: {\n      temperature: 1.2,\n      top_p: 1.0,\n      max_tokens: 512,\n      frequency_penalty: 0.2,\n    },\n  },\n  {\n    name: \"Precise\",\n    description: \"Settings for more focused and deterministic outputs\",\n    parameters: {\n      temperature: 0.3,\n      top_p: 0.8,\n      max_tokens: 256,\n      frequency_penalty: 0.3,\n    },\n  },\n  {\n    name: \"Efficient\",\n    description: \"Settings optimized for shorter, concise responses\",\n    parameters: {\n      temperature: 0.5,\n      top_p: 0.9,\n      max_tokens: 128,\n      frequency_penalty: 0.5,\n    },\n  },\n];\n\nexport const AIParameterControls = React.forwardRef<\n  HTMLDivElement,\n  AIParameterControlsProps\n>(\n  (\n    {\n      className,\n      parameters = DEFAULT_PARAMETERS,\n      onParametersChange,\n      presets = DEFAULT_PRESETS,\n      onPresetChange,\n      showReset = true,\n      showPresets = true,\n      resetLabel = \"Reset to defaults\",\n      parameterClassName,\n      layout = \"vertical\",\n      decimalPlaces = 1,\n      ...props\n    },\n    ref\n  ) => {\n    // Store the initial parameter values for reset functionality\n    const initialParametersRef = React.useRef<AIParameter[]>([...parameters]);\n\n    // State for parameters\n    const [localParameters, setLocalParameters] =\n      React.useState<AIParameter[]>(parameters);\n\n    // Update local parameters when props change (but not for user interactions)\n    React.useEffect(() => {\n      setLocalParameters(parameters);\n\n      // Also update the initial parameters reference if it's the first render\n      if (initialParametersRef.current.length === 0) {\n        initialParametersRef.current = [...parameters];\n      }\n    }, [parameters]);\n\n    // Handle parameter change\n    const handleParameterChange = (name: string, value: number) => {\n      const updatedParameters = localParameters.map((param) =>\n        param.name === name ? { ...param, value } : param\n      );\n      setLocalParameters(updatedParameters);\n\n      if (onParametersChange) {\n        onParametersChange(updatedParameters);\n      }\n    };\n\n    // Handle preset selection\n    const handlePresetChange = (presetName: string) => {\n      const selectedPreset = presets.find((p) => p.name === presetName);\n      if (!selectedPreset) return;\n\n      // Update parameters based on preset\n      const updatedParameters = localParameters.map((param) => {\n        const presetValue = selectedPreset.parameters[param.name];\n        return presetValue !== undefined\n          ? { ...param, value: presetValue }\n          : param;\n      });\n\n      setLocalParameters(updatedParameters);\n\n      if (onParametersChange) {\n        onParametersChange(updatedParameters);\n      }\n\n      if (onPresetChange) {\n        onPresetChange(selectedPreset);\n      }\n    };\n\n    // Handle reset to defaults\n    const handleReset = () => {\n      // Reset to the initial parameters that were stored when the component first mounted\n      const resetParams = [...initialParametersRef.current];\n      setLocalParameters(resetParams);\n\n      if (onParametersChange) {\n        onParametersChange(resetParams);\n      }\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"space-y-4\",\n          layout === \"horizontal\"\n            ? \"sm:space-y-0 sm:space-x-6 sm:flex sm:items-start\"\n            : \"\",\n          className\n        )}\n        {...props}\n      >\n        {/* Preset selector */}\n        {showPresets && (\n          <div\n            className={cn(\"w-full\", layout === \"horizontal\" ? \"sm:w-40\" : \"\")}\n          >\n            <div className=\"mb-2 flex items-center\">\n              <span className=\"text-sm font-medium\">Preset</span>\n              <TooltipProvider>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Zap className=\"h-3.5 w-3.5 ml-1.5 text-muted-foreground\" />\n                  </TooltipTrigger>\n                  <TooltipContent side=\"right\" className=\"max-w-80\">\n                    Quick configuration presets for different use cases\n                  </TooltipContent>\n                </Tooltip>\n              </TooltipProvider>\n            </div>\n            <Select onValueChange={handlePresetChange}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select preset\" />\n              </SelectTrigger>\n              <SelectContent>\n                {presets.map((preset) => (\n                  <SelectItem key={preset.name} value={preset.name}>\n                    <div className=\"flex flex-col\">\n                      <span>{preset.name}</span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {preset.description}\n                      </span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        )}\n\n        {/* Parameter controls */}\n        <div\n          className={cn(\n            \"space-y-6\",\n            layout === \"horizontal\"\n              ? \"sm:flex sm:space-y-0 sm:space-x-6 sm:flex-1\"\n              : \"\"\n          )}\n        >\n          {localParameters.map((param) => (\n            <div\n              key={param.name}\n              className={cn(\n                \"space-y-2\",\n                layout === \"horizontal\" ? \"sm:flex-1\" : \"\",\n                parameterClassName\n              )}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <label\n                    htmlFor={param.name}\n                    className=\"text-sm font-medium capitalize\"\n                  >\n                    {param.name.replace(/_/g, \" \")}\n                  </label>\n                  <TooltipProvider>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <span className=\"ml-1.5 h-3.5 w-3.5 rounded-full border border-muted-foreground/30 inline-flex items-center justify-center text-[10px] font-medium text-muted-foreground\">\n                          ?\n                        </span>\n                      </TooltipTrigger>\n                      <TooltipContent side=\"right\" className=\"max-w-80\">\n                        {param.description}\n                      </TooltipContent>\n                    </Tooltip>\n                  </TooltipProvider>\n                </div>\n                <span className=\"text-sm text-muted-foreground\">\n                  {param.name === \"max_tokens\"\n                    ? Math.round(param.value).toLocaleString()\n                    : param.value.toFixed(decimalPlaces)}\n                </span>\n              </div>\n\n              {param.name === \"max_tokens\" ? (\n                <Input\n                  id={param.name}\n                  type=\"number\"\n                  min={param.min}\n                  max={param.max}\n                  step={param.step}\n                  value={param.value}\n                  onChange={(e) =>\n                    handleParameterChange(\n                      param.name,\n                      parseFloat(e.target.value)\n                    )\n                  }\n                  className=\"h-8\"\n                />\n              ) : (\n                <Slider\n                  id={param.name}\n                  min={param.min}\n                  max={param.max}\n                  step={param.step}\n                  value={[param.value]}\n                  onValueChange={(values) =>\n                    handleParameterChange(param.name, values[0])\n                  }\n                />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Reset button */}\n        {showReset && (\n          <div\n            className={cn(layout === \"horizontal\" ? \"sm:self-end sm:pb-2\" : \"\")}\n          >\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleReset}\n              className=\"h-8 text-xs\"\n            >\n              <RefreshCw className=\"mr-1.5 h-3 w-3\" />\n              {resetLabel}\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nAIParameterControls.displayName = \"AIParameterControls\";\n",
      "type": "registry:ui"
    }
  ]
}