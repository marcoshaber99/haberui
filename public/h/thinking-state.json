{
  "name": "thinking-state",
  "type": "registry:ui",
  "version": "1.0.0",
  "description": "ThinkingState - A customizable, animated indicator for loading/thinking states with support for message cycling and completion states.",
  "lastUpdated": "2025-02-26T20:06:43.013Z",
  "registryDependencies": [],
  "dependencies": [
    "class-variance-authority",
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "thinking-state.tsx",
      "content": "/**\n * ThinkingState - A customizable, animated indicator for loading/thinking states\n * with support for message cycling and completion states.\n */\n\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion, AnimatePresence } from \"motion/react\";\n\nconst thinkingStateVariants = cva(\n  \"flex items-center text-muted-foreground/80 transition-colors\",\n  {\n    variants: {\n      variant: {\n        pulse: \"\",\n        dots: \"\",\n        wave: \"\", // Renamed from \"bars\" to \"wave\"\n        bounce: \"\",\n      },\n      size: {\n        sm: \"text-xs\",\n        md: \"text-sm\",\n        lg: \"text-base\",\n      },\n      colorScheme: {\n        default: \"\",\n        blue: \"text-blue-500\",\n        purple: \"text-purple-500\",\n        green: \"text-green-500\",\n        amber: \"text-amber-500\",\n        rose: \"text-rose-500\",\n      },\n    },\n    defaultVariants: {\n      variant: \"pulse\",\n      size: \"md\",\n      colorScheme: \"default\",\n    },\n  }\n);\n\ntype MessageItem = string | ((index: number) => string) | React.ReactNode;\n\nexport interface ThinkingStateProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    Omit<VariantProps<typeof thinkingStateVariants>, \"color\"> {\n  /**\n   * Array of messages or message generators to cycle through\n   */\n  messages?: MessageItem[];\n\n  /**\n   * How messages should cycle\n   */\n  mode?: \"random\" | \"sequential\";\n\n  /**\n   * Time between message changes in ms\n   */\n  interval?: number;\n\n  /**\n   * Whether the process is complete\n   */\n  isComplete?: boolean;\n\n  /**\n   * Message to show when complete\n   */\n  completionMessage?: MessageItem;\n\n  /**\n   * Accessible label for the loading indicator\n   */\n  ariaLabel?: string;\n\n  /**\n   * Classes to apply to the animation container\n   */\n  animationClassName?: string;\n\n  /**\n   * Classes to apply to the message text\n   */\n  messageClassName?: string;\n}\n\nconst defaultMessages = [\"Thinking...\", \"Processing...\", \"Almost there...\"];\n\nexport const ThinkingState = React.forwardRef<\n  HTMLDivElement,\n  ThinkingStateProps\n>(\n  (\n    {\n      messages = defaultMessages,\n      variant = \"pulse\",\n      size = \"md\",\n      colorScheme = \"default\",\n      mode = \"sequential\",\n      interval = 2000,\n      isComplete = false,\n      completionMessage = \"Done!\",\n      className,\n      animationClassName,\n      messageClassName,\n      ariaLabel,\n      ...props\n    },\n    ref\n  ) => {\n    const [currentMessage, setCurrentMessage] = React.useState<MessageItem>(\n      messages[0]\n    );\n    const [currentIndex, setCurrentIndex] = React.useState(0);\n\n    // Find the longest message for width calculation\n    const [longestMessage, setLongestMessage] = React.useState(\"\");\n\n    React.useEffect(() => {\n      const allMessages = [...messages, completionMessage];\n      let longest = \"\";\n\n      allMessages.forEach((msg) => {\n        const resolvedMsg = typeof msg === \"function\" ? msg(0) : msg;\n        const msgStr = React.isValidElement(resolvedMsg)\n          ? \"XXXXXXXXXXXXX\" // Placeholder for React elements\n          : String(resolvedMsg);\n\n        if (msgStr.length > longest.length) {\n          longest = msgStr;\n        }\n      });\n\n      setLongestMessage(longest);\n    }, [messages, completionMessage]);\n\n    const resolveMessage = React.useCallback(\n      (message: MessageItem, index: number): React.ReactNode => {\n        if (typeof message === \"function\") {\n          return message(index);\n        }\n        return message;\n      },\n      []\n    );\n\n    React.useEffect(() => {\n      if (isComplete) {\n        setCurrentMessage(completionMessage);\n        return () => {};\n      }\n\n      const updateMessage = () => {\n        setTimeout(() => {\n          if (mode === \"random\") {\n            let nextIndex;\n            do {\n              nextIndex = Math.floor(Math.random() * messages.length);\n            } while (nextIndex === currentIndex && messages.length > 1);\n\n            setCurrentIndex(nextIndex);\n            setCurrentMessage(messages[nextIndex]);\n          } else {\n            const nextIndex = (currentIndex + 1) % messages.length;\n            setCurrentIndex(nextIndex);\n            setCurrentMessage(messages[nextIndex]);\n          }\n        }, 200);\n      };\n\n      const timer = setInterval(updateMessage, interval);\n      return () => clearInterval(timer);\n    }, [messages, mode, interval, currentIndex, isComplete, completionMessage]);\n\n    // Get element size based on size prop\n    const getElementSize = () => {\n      switch (size) {\n        case \"sm\":\n          return { barWidth: 1, barHeight: 12, gap: 1.5 };\n        case \"lg\":\n          return { barWidth: 2, barHeight: 20, gap: 2.5 };\n        default: // md\n          return { barWidth: 1.5, barHeight: 16, gap: 2 };\n      }\n    };\n\n    const { barWidth, barHeight, gap } = getElementSize();\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          thinkingStateVariants({ variant, size, colorScheme }),\n          className\n        )}\n        role=\"status\"\n        aria-label={ariaLabel || \"Loading indicator\"}\n        data-state={isComplete ? \"complete\" : \"loading\"}\n        data-variant={variant}\n        {...props}\n      >\n        {/* Animation dots container */}\n        <div\n          className={cn(\"flex items-center mr-3\", animationClassName)}\n          aria-hidden=\"true\"\n          data-slot=\"animation\"\n        >\n          {variant === \"pulse\" && (\n            <>\n              {[...Array(3)].map((_, i) => (\n                <motion.div\n                  key={i}\n                  className=\"size-2 rounded-full bg-current mx-0.5 first:ml-0 last:mr-0\"\n                  initial={{ opacity: 1 }}\n                  animate={isComplete ? {} : { opacity: [1, 0.4, 1] }}\n                  transition={\n                    isComplete\n                      ? {}\n                      : {\n                          duration: 1.5,\n                          repeat: Infinity,\n                          repeatType: \"loop\",\n                          ease: \"easeInOut\",\n                          delay: i * 0.2,\n                        }\n                  }\n                />\n              ))}\n            </>\n          )}\n\n          {variant === \"dots\" && (\n            <>\n              {[...Array(3)].map((_, i) => (\n                <motion.div\n                  key={i}\n                  className=\"size-2 rounded-full bg-current mx-0.5 first:ml-0 last:mr-0\"\n                  initial={{ y: 0 }}\n                  animate={isComplete ? {} : { y: [0, -4, 0] }}\n                  transition={\n                    isComplete\n                      ? {}\n                      : {\n                          duration: 1.4,\n                          repeat: Infinity,\n                          repeatType: \"loop\",\n                          ease: \"easeInOut\",\n                          delay: i * 0.2,\n                        }\n                  }\n                />\n              ))}\n            </>\n          )}\n\n          {variant === \"wave\" && ( // Updated from \"bars\" to \"wave\"\n            <div className=\"flex items-center\" style={{ gap: `${gap}px` }}>\n              {/* Create 5 bars with different heights in a wave pattern */}\n              {[0.4, 0.7, 1, 0.7, 0.4].map((scale, i) => (\n                <motion.div\n                  key={i}\n                  className=\"bg-current rounded-full\"\n                  style={{\n                    width: `${barWidth}px`,\n                    height: `${barHeight * scale}px`,\n                    originY: \"center\",\n                  }}\n                  initial={{ scaleY: scale }}\n                  animate={\n                    isComplete\n                      ? { scaleY: scale }\n                      : {\n                          scaleY: [scale, scale * 1.8, scale],\n                        }\n                  }\n                  transition={{\n                    duration: 1.2,\n                    repeat: Infinity,\n                    repeatType: \"loop\",\n                    ease: \"easeInOut\",\n                    // Create a wave effect by staggering the animations\n                    delay: (i * 0.15) % 0.75,\n                  }}\n                />\n              ))}\n            </div>\n          )}\n\n          {variant === \"bounce\" && (\n            <motion.div\n              className=\"size-4 rounded-full bg-current\"\n              animate={isComplete ? {} : { y: [-8, 0] }}\n              transition={\n                isComplete\n                  ? {}\n                  : {\n                      duration: 0.5,\n                      repeat: Infinity,\n                      repeatType: \"reverse\",\n                      ease: \"easeOut\",\n                    }\n              }\n            />\n          )}\n        </div>\n\n        {/* Message container with stable width */}\n        <div\n          className=\"relative overflow-hidden min-w-28\"\n          data-slot=\"message-container\"\n        >\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={String(currentIndex) + (isComplete ? \"complete\" : \"\")}\n              className={cn(\"font-medium\", messageClassName)}\n              initial={{ opacity: 0, y: 5 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -5 }}\n              transition={{ duration: 0.2 }}\n              aria-live=\"polite\"\n              aria-atomic=\"true\"\n              data-slot=\"message\"\n            >\n              {resolveMessage(currentMessage, currentIndex)}\n            </motion.div>\n          </AnimatePresence>\n\n          {/* Hidden element for width measurement */}\n          <div\n            className=\"invisible absolute h-0 top-0 whitespace-nowrap\"\n            aria-hidden=\"true\"\n          >\n            {longestMessage}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nThinkingState.displayName = \"ThinkingState\";\n",
      "type": "registry:ui"
    }
  ]
}