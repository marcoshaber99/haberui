{
  "name": "thinking-state",
  "type": "registry:ui",
  "version": "1.0.0",
  "lastUpdated": "2025-02-23T22:22:20.983Z",
  "registryDependencies": [],
  "dependencies": [],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "thinking-state.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport type ThinkingStateVariant = \"pulse\" | \"dots\" | \"bars\" | \"bounce\";\nexport type ThinkingStateMode = \"random\" | \"sequential\";\n\ntype MessageItem = string | ((index: number) => string) | React.ReactNode;\n\ninterface ThinkingStateProps extends React.HTMLAttributes<HTMLDivElement> {\n  /** Array of messages or message generators to cycle through */\n  messages?: MessageItem[];\n  /** Animation variant */\n  variant?: ThinkingStateVariant;\n  /** How messages should cycle */\n  mode?: ThinkingStateMode;\n  /** Time between message changes in ms */\n  interval?: number;\n  /** Whether the process is complete */\n  isComplete?: boolean;\n  /** Message to show when complete */\n  completionMessage?: MessageItem;\n  /** Accessible label for the loading state */\n  ariaLabel?: string;\n}\n\nconst defaultMessages = [\"Thinking...\", \"Processing...\", \"Almost there...\"];\n\nexport const ThinkingState = React.forwardRef<\n  HTMLDivElement,\n  ThinkingStateProps\n>(\n  (\n    {\n      messages = defaultMessages,\n      variant = \"pulse\",\n      mode = \"sequential\",\n      interval = 2000,\n      isComplete = false,\n      completionMessage = \"Done!\",\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const [currentMessage, setCurrentMessage] = React.useState<MessageItem>(\n      messages[0]\n    );\n    const [currentIndex, setCurrentIndex] = React.useState(0);\n    const [isTransitioning, setIsTransitioning] = React.useState(false);\n\n    const resolveMessage = React.useCallback(\n      (message: MessageItem, index: number): React.ReactNode => {\n        if (typeof message === \"function\") {\n          return message(index);\n        }\n        return message;\n      },\n      []\n    );\n\n    React.useEffect(() => {\n      if (isComplete) {\n        setCurrentMessage(completionMessage);\n        return;\n      }\n\n      const updateMessage = () => {\n        setIsTransitioning(true);\n\n        setTimeout(() => {\n          if (mode === \"random\") {\n            let nextIndex;\n            do {\n              nextIndex = Math.floor(Math.random() * messages.length);\n            } while (nextIndex === currentIndex && messages.length > 1);\n            setCurrentIndex(nextIndex);\n            setCurrentMessage(messages[nextIndex]);\n          } else {\n            const nextIndex = (currentIndex + 1) % messages.length;\n            setCurrentIndex(nextIndex);\n            setCurrentMessage(messages[nextIndex]);\n          }\n\n          setIsTransitioning(false);\n        }, 200);\n      };\n\n      const timer = setInterval(updateMessage, interval);\n      return () => clearInterval(timer);\n    }, [messages, mode, interval, currentIndex, isComplete, completionMessage]);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center gap-3 text-muted-foreground/80\",\n          className\n        )}\n        role=\"status\"\n        aria-label={props.ariaLabel || \"Loading indicator\"}\n        {...props}\n      >\n        <div className=\"flex items-center gap-1\" aria-hidden=\"true\">\n          {variant === \"pulse\" && (\n            <>\n              {[...Array(3)].map((_, i) => (\n                <div\n                  key={i}\n                  className={cn(\n                    \"size-2 rounded-full bg-current\",\n                    !isComplete && \"animate-[pulse_1.5s_ease-in-out_infinite]\",\n                    {\n                      \"animation-delay-[200ms]\": i === 1,\n                      \"animation-delay-[400ms]\": i === 2,\n                    }\n                  )}\n                  style={{\n                    animationName: !isComplete ? \"thinking-pulse\" : undefined,\n                  }}\n                />\n              ))}\n            </>\n          )}\n\n          {variant === \"dots\" && (\n            <>\n              {[...Array(3)].map((_, i) => (\n                <div\n                  key={i}\n                  className={cn(\n                    \"size-2 rounded-full bg-current\",\n                    !isComplete && \"animate-[bounce_1.4s_ease-in-out_infinite]\",\n                    {\n                      \"animation-delay-[200ms]\": i === 1,\n                      \"animation-delay-[400ms]\": i === 2,\n                    }\n                  )}\n                  style={{\n                    animationName: !isComplete ? \"thinking-bounce\" : undefined,\n                  }}\n                />\n              ))}\n            </>\n          )}\n\n          {variant === \"bars\" && (\n            <>\n              {[...Array(3)].map((_, i) => (\n                <div\n                  key={i}\n                  className={cn(\n                    \"h-4 w-1 rounded-full bg-current\",\n                    !isComplete && \"animate-[scale_1.5s_ease-in-out_infinite]\",\n                    {\n                      \"animation-delay-[200ms]\": i === 1,\n                      \"animation-delay-[400ms]\": i === 2,\n                    }\n                  )}\n                  style={{\n                    animationName: !isComplete ? \"thinking-scale\" : undefined,\n                  }}\n                />\n              ))}\n            </>\n          )}\n\n          {variant === \"bounce\" && (\n            <div\n              className={cn(\n                \"size-4 rounded-full bg-current\",\n                !isComplete && \"animate-bounce\"\n              )}\n            />\n          )}\n        </div>\n\n        <span\n          className={cn(\n            \"text-sm font-medium transition-opacity duration-300\",\n            isTransitioning ? \"opacity-0\" : \"opacity-100\"\n          )}\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n        >\n          {resolveMessage(currentMessage, currentIndex)}\n        </span>\n      </div>\n    );\n  }\n);\n\nThinkingState.displayName = \"ThinkingState\";\n\n// Add styles to document\nif (typeof document !== \"undefined\") {\n  const style = document.createElement(\"style\");\n  style.textContent = `\n    @keyframes thinking-pulse {\n      0%, 100% { opacity: 1; }\n      50% { opacity: 0.4; }\n    }\n    @keyframes thinking-bounce {\n      0%, 100% { transform: translateY(0); }\n      50% { transform: translateY(-4px); }\n    }\n    @keyframes thinking-scale {\n      0%, 100% { transform: scaleY(1); }\n      50% { transform: scaleY(0.4); }\n    }\n  `;\n  document.head.appendChild(style);\n}\n",
      "type": "registry:ui"
    }
  ]
}