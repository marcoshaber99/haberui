{
  "name": "ai-feedback-collector",
  "type": "registry:ui",
  "version": "1.0.0",
  "description": "A flexible component for collecting user feedback on AI-generated content. Supports thumbs up/down reactions, optional comments, and custom styling.",
  "lastUpdated": "2025-02-25T00:27:42.738Z",
  "registryDependencies": [],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "ai-feedback-collector.tsx",
      "content": "/**\n * A flexible component for collecting user feedback on AI-generated content.\n * Supports thumbs up/down reactions, optional comments, and custom styling.\n */\n\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { ThumbsUp, ThumbsDown, MessageSquare, Check } from \"lucide-react\";\n\nexport type FeedbackType = \"positive\" | \"negative\" | null;\n\nexport interface AIFeedbackCollectorProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Function called when feedback is submitted\n   */\n  onFeedback?: (feedback: {\n    type: FeedbackType;\n    comment?: string;\n  }) => void | Promise<void>;\n  /**\n   * Allow users to add comments with their feedback\n   */\n  allowComments?: boolean;\n  /**\n   * Text shown for the feedback prompt\n   */\n  promptText?: string;\n  /**\n   * Text shown after feedback is submitted\n   */\n  thanksText?: string;\n  /**\n   * Custom icon for positive feedback (default: ThumbsUp)\n   */\n  positiveIcon?: React.ReactNode;\n  /**\n   * Custom icon for negative feedback (default: ThumbsDown)\n   */\n  negativeIcon?: React.ReactNode;\n  /**\n   * Custom classes for the buttons\n   */\n  buttonClassName?: string;\n  /**\n   * Custom classes for active (selected) buttons\n   */\n  activeButtonClassName?: string;\n}\n\nexport const AIFeedbackCollector = React.forwardRef<\n  HTMLDivElement,\n  AIFeedbackCollectorProps\n>(\n  (\n    {\n      className,\n      onFeedback,\n      allowComments = false,\n      promptText = \"Was this response helpful?\",\n      thanksText = \"Thanks for your feedback!\",\n      positiveIcon,\n      negativeIcon,\n      buttonClassName,\n      activeButtonClassName,\n      ...props\n    },\n    ref\n  ) => {\n    const [feedbackType, setFeedbackType] = React.useState<FeedbackType>(null);\n    const [comment, setComment] = React.useState(\"\");\n    const [showCommentField, setShowCommentField] = React.useState(false);\n    const [isSubmitted, setIsSubmitted] = React.useState(false);\n    const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n    const handleFeedbackClick = (type: FeedbackType) => {\n      // Toggle off if clicking the same button\n      if (feedbackType === type) {\n        setFeedbackType(null);\n        return;\n      }\n\n      setFeedbackType(type);\n\n      // If we don't allow comments, submit immediately\n      if (!allowComments) {\n        submitFeedback(type);\n      } else if (type === \"negative\") {\n        // Show comment field for negative feedback\n        setShowCommentField(true);\n      } else {\n        // Submit positive feedback without comment\n        submitFeedback(type);\n      }\n    };\n\n    const submitFeedback = async (type: FeedbackType, userComment?: string) => {\n      if (!onFeedback) return;\n\n      setIsSubmitting(true);\n\n      try {\n        await onFeedback({\n          type,\n          comment: userComment || comment,\n        });\n        setIsSubmitted(true);\n      } catch (error) {\n        console.error(\"Error submitting feedback:\", error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    const handleCommentSubmit = () => {\n      submitFeedback(feedbackType, comment);\n    };\n\n    const defaultButtonClass = cn(\n      \"inline-flex items-center justify-center rounded-md p-2 transition-colors\",\n      \"hover:bg-muted focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n      buttonClassName\n    );\n\n    const activeButtonClass = cn(\n      defaultButtonClass,\n      \"bg-muted\",\n      activeButtonClassName\n    );\n\n    if (isSubmitted) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\"flex items-center gap-2 text-sm\", className)}\n          {...props}\n        >\n          <Check size={16} className=\"text-green-500\" />\n          <span>{thanksText}</span>\n        </div>\n      );\n    }\n\n    return (\n      <div ref={ref} className={cn(\"space-y-3\", className)} {...props}>\n        <div className=\"flex items-center gap-3\">\n          <span className=\"text-sm text-muted-foreground\">{promptText}</span>\n          <div className=\"flex items-center gap-1\">\n            <button\n              onClick={() => handleFeedbackClick(\"positive\")}\n              className={\n                feedbackType === \"positive\"\n                  ? activeButtonClass\n                  : defaultButtonClass\n              }\n              disabled={isSubmitting}\n              aria-label=\"Positive feedback\"\n            >\n              {positiveIcon || <ThumbsUp size={16} />}\n            </button>\n            <button\n              onClick={() => handleFeedbackClick(\"negative\")}\n              className={\n                feedbackType === \"negative\"\n                  ? activeButtonClass\n                  : defaultButtonClass\n              }\n              disabled={isSubmitting}\n              aria-label=\"Negative feedback\"\n            >\n              {negativeIcon || <ThumbsDown size={16} />}\n            </button>\n          </div>\n        </div>\n\n        {allowComments && showCommentField && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <MessageSquare size={14} className=\"text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">\n                Would you like to add a comment?\n              </span>\n            </div>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                placeholder=\"What could be improved?\"\n                className=\"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n                disabled={isSubmitting}\n              />\n              <button\n                onClick={handleCommentSubmit}\n                className=\"inline-flex h-9 items-center justify-center rounded-md bg-primary px-3 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? \"Sending...\" : \"Send\"}\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nAIFeedbackCollector.displayName = \"AIFeedbackCollector\";\n",
      "type": "registry:ui"
    }
  ]
}