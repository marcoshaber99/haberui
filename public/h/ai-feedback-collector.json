{
  "name": "ai-feedback-collector",
  "type": "registry:ui",
  "version": "1.0.0",
  "description": "A flexible component for collecting user feedback on AI-generated content. Supports thumbs up/down reactions, optional comments, and custom styling.",
  "lastUpdated": "2025-02-26T16:01:07.028Z",
  "registryDependencies": [],
  "dependencies": [
    "lucide-react",
    "class-variance-authority"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "ai-feedback-collector.tsx",
      "content": "/**\n * A flexible component for collecting user feedback on AI-generated content.\n * Supports thumbs up/down reactions, optional comments, and custom styling.\n */\n\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { ThumbsUp, ThumbsDown, MessageSquare, Check } from \"lucide-react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nexport type FeedbackType = \"positive\" | \"negative\" | null;\n\nconst feedbackCollectorVariants = cva(\"space-y-3\", {\n  variants: {\n    variant: {\n      default: \"\",\n      minimal: \"\",\n      card: \"\",\n    },\n    size: {\n      sm: \"text-xs\",\n      md: \"text-sm\",\n      lg: \"text-base\",\n    },\n    colorScheme: {\n      default: \"\",\n      blue: \"\",\n      green: \"\",\n      amber: \"\",\n      purple: \"\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n    colorScheme: \"default\",\n  },\n});\n\nconst feedbackButtonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md p-2 transition-colors\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-muted focus-visible:ring-1 focus-visible:ring-ring\",\n        minimal:\n          \"hover:opacity-80 focus-visible:ring-1 focus-visible:ring-ring\",\n        card: \"bg-card hover:bg-card/80 shadow-sm focus-visible:ring-1 focus-visible:ring-ring\",\n      },\n      size: {\n        sm: \"p-1\",\n        md: \"p-2\",\n        lg: \"p-3\",\n      },\n      colorScheme: {\n        default: \"\",\n        blue: \"data-[state=active]:text-blue-500 data-[state=active]:bg-blue-500/10\",\n        green:\n          \"data-[state=active]:text-green-500 data-[state=active]:bg-green-500/10\",\n        amber:\n          \"data-[state=active]:text-amber-500 data-[state=active]:bg-amber-500/10\",\n        purple:\n          \"data-[state=active]:text-purple-500 data-[state=active]:bg-purple-500/10\",\n      },\n      active: {\n        true: \"bg-muted\",\n        false: \"\",\n      },\n    },\n    compoundVariants: [\n      {\n        colorScheme: \"default\",\n        active: true,\n        className: \"bg-muted\",\n      },\n    ],\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n      colorScheme: \"default\",\n      active: false,\n    },\n  }\n);\n\nexport interface AIFeedbackCollectorProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    Omit<VariantProps<typeof feedbackCollectorVariants>, \"color\"> {\n  /**\n   * Function called when feedback is submitted\n   */\n  onFeedback?: (feedback: {\n    type: FeedbackType;\n    comment?: string;\n  }) => void | Promise<void>;\n\n  /**\n   * Allow users to add comments with their feedback\n   */\n  allowComments?: boolean;\n\n  /**\n   * Only show comment field for negative feedback\n   */\n  commentsOnNegativeOnly?: boolean;\n\n  /**\n   * Text shown for the feedback prompt\n   */\n  promptText?: string;\n\n  /**\n   * Text shown after feedback is submitted\n   */\n  thanksText?: string;\n\n  /**\n   * Text for the comment field prompt\n   */\n  commentPromptText?: string;\n\n  /**\n   * Placeholder text for the comment field\n   */\n  commentPlaceholder?: string;\n\n  /**\n   * Text for the comment submit button\n   */\n  commentSubmitText?: string;\n\n  /**\n   * Text shown while submitting\n   */\n  submittingText?: string;\n\n  /**\n   * Custom icon for positive feedback (default: ThumbsUp)\n   */\n  positiveIcon?: React.ReactNode;\n\n  /**\n   * Custom icon for negative feedback (default: ThumbsDown)\n   */\n  negativeIcon?: React.ReactNode;\n\n  /**\n   * Custom classes for the buttons\n   */\n  buttonClassName?: string;\n\n  /**\n   * Custom classes for active (selected) buttons\n   */\n  activeButtonClassName?: string;\n\n  /**\n   * Custom classes for the comment field\n   */\n  commentFieldClassName?: string;\n}\n\nexport const AIFeedbackCollector = React.forwardRef<\n  HTMLDivElement,\n  AIFeedbackCollectorProps\n>(\n  (\n    {\n      className,\n      variant = \"default\",\n      size = \"md\",\n      colorScheme = \"default\",\n      onFeedback,\n      allowComments = false,\n      commentsOnNegativeOnly = true,\n      promptText = \"Was this response helpful?\",\n      thanksText = \"Thanks for your feedback!\",\n      commentPromptText = \"Would you like to add a comment?\",\n      commentPlaceholder = \"What could be improved?\",\n      commentSubmitText = \"Send\",\n      submittingText = \"Sending...\",\n      positiveIcon,\n      negativeIcon,\n      buttonClassName,\n      activeButtonClassName,\n      commentFieldClassName,\n      ...props\n    },\n    ref\n  ) => {\n    const [feedbackType, setFeedbackType] = React.useState<FeedbackType>(null);\n    const [comment, setComment] = React.useState(\"\");\n    const [showCommentField, setShowCommentField] = React.useState(false);\n    const [isSubmitted, setIsSubmitted] = React.useState(false);\n    const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n    const commentInputRef = React.useRef<HTMLInputElement>(null);\n\n    // Focus the comment input when it appears\n    React.useEffect(() => {\n      if (showCommentField && commentInputRef.current) {\n        commentInputRef.current.focus();\n      }\n    }, [showCommentField]);\n\n    const handleFeedbackClick = (type: FeedbackType) => {\n      // Toggle off if clicking the same button\n      if (feedbackType === type) {\n        setFeedbackType(null);\n        setShowCommentField(false);\n        return;\n      }\n\n      setFeedbackType(type);\n\n      // Determine whether to show comments\n      if (allowComments) {\n        if (commentsOnNegativeOnly) {\n          // Only show comments for negative feedback\n          if (type === \"negative\") {\n            setShowCommentField(true);\n          } else {\n            submitFeedback(type);\n          }\n        } else {\n          // Show comments for any feedback\n          setShowCommentField(true);\n        }\n      } else {\n        // Submit immediately without comments\n        submitFeedback(type);\n      }\n    };\n\n    const submitFeedback = async (type: FeedbackType, userComment?: string) => {\n      if (!onFeedback) return;\n\n      setIsSubmitting(true);\n\n      try {\n        await onFeedback({\n          type,\n          comment: userComment || comment,\n        });\n        setIsSubmitted(true);\n      } catch (error) {\n        console.error(\"Error submitting feedback:\", error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    const handleCommentSubmit = () => {\n      submitFeedback(feedbackType, comment);\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleCommentSubmit();\n      }\n    };\n\n    // If feedback was submitted, show the thank you message\n    if (isSubmitted) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"flex items-center gap-2 text-green-500 transition-opacity duration-300\",\n            size === \"sm\" ? \"text-xs\" : size === \"lg\" ? \"text-base\" : \"text-sm\",\n            className\n          )}\n          role=\"status\"\n          {...props}\n        >\n          <Check\n            size={size === \"sm\" ? 14 : size === \"lg\" ? 20 : 16}\n            className=\"shrink-0\"\n          />\n          <span>{thanksText}</span>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          feedbackCollectorVariants({ variant, size, colorScheme }),\n          className\n        )}\n        data-state={isSubmitting ? \"submitting\" : \"idle\"}\n        {...props}\n      >\n        <div className=\"flex items-center gap-3\">\n          <span\n            className={cn(\n              \"text-muted-foreground\",\n              variant === \"card\" && \"font-medium text-foreground\"\n            )}\n          >\n            {promptText}\n          </span>\n\n          <div className=\"flex items-center gap-1\">\n            <button\n              type=\"button\"\n              onClick={() => handleFeedbackClick(\"positive\")}\n              className={cn(\n                feedbackButtonVariants({\n                  variant,\n                  size,\n                  colorScheme,\n                  active: feedbackType === \"positive\",\n                }),\n                buttonClassName,\n                feedbackType === \"positive\" && activeButtonClassName\n              )}\n              disabled={isSubmitting}\n              aria-label=\"Positive feedback\"\n              aria-pressed={feedbackType === \"positive\"}\n              data-state={feedbackType === \"positive\" ? \"active\" : \"inactive\"}\n            >\n              {positiveIcon || (\n                <ThumbsUp size={size === \"sm\" ? 14 : size === \"lg\" ? 20 : 16} />\n              )}\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => handleFeedbackClick(\"negative\")}\n              className={cn(\n                feedbackButtonVariants({\n                  variant,\n                  size,\n                  colorScheme,\n                  active: feedbackType === \"negative\",\n                }),\n                buttonClassName,\n                feedbackType === \"negative\" && activeButtonClassName\n              )}\n              disabled={isSubmitting}\n              aria-label=\"Negative feedback\"\n              aria-pressed={feedbackType === \"negative\"}\n              data-state={feedbackType === \"negative\" ? \"active\" : \"inactive\"}\n            >\n              {negativeIcon || (\n                <ThumbsDown\n                  size={size === \"sm\" ? 14 : size === \"lg\" ? 20 : 16}\n                />\n              )}\n            </button>\n          </div>\n        </div>\n\n        {allowComments && showCommentField && (\n          <div className=\"space-y-2 animate-in slide-in-from-top-2 duration-200\">\n            <div className=\"flex items-center gap-2\">\n              <MessageSquare\n                size={size === \"sm\" ? 12 : size === \"lg\" ? 16 : 14}\n                className=\"text-muted-foreground shrink-0\"\n              />\n              <span\n                className={cn(\n                  \"text-muted-foreground\",\n                  size === \"sm\"\n                    ? \"text-xs\"\n                    : size === \"lg\"\n                      ? \"text-base\"\n                      : \"text-sm\"\n                )}\n              >\n                {commentPromptText}\n              </span>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <input\n                ref={commentInputRef}\n                type=\"text\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                onKeyDown={handleKeyDown}\n                placeholder={commentPlaceholder}\n                className={cn(\n                  \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-xs transition-colors\",\n                  \"placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n                  commentFieldClassName\n                )}\n                disabled={isSubmitting}\n                aria-label={commentPlaceholder}\n              />\n\n              <button\n                type=\"button\"\n                onClick={handleCommentSubmit}\n                className={cn(\n                  \"inline-flex h-9 items-center justify-center rounded-md bg-primary px-3 font-medium\",\n                  \"text-primary-foreground shadow-sm transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1\",\n                  \"disabled:pointer-events-none disabled:opacity-50\",\n                  size === \"sm\"\n                    ? \"text-xs px-2\"\n                    : size === \"lg\"\n                      ? \"text-base px-4\"\n                      : \"text-sm px-3\"\n                )}\n                disabled={isSubmitting}\n                aria-label={commentSubmitText}\n              >\n                {isSubmitting ? submittingText : commentSubmitText}\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nAIFeedbackCollector.displayName = \"AIFeedbackCollector\";\n",
      "type": "registry:ui"
    }
  ]
}